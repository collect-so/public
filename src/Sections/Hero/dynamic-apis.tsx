import { useCycle, useInView } from "framer-motion";
import { ColoredChip, ColoredChipColor } from "~/components/colored-chip";
import { useEffect, useRef, useState } from "react";
import { randomIntFromRange } from "~/common";
import cx from "classnames";
import { CodeBlock } from "~/components/codeblock";
import { FeatureContainer } from "~/components/feature-container";

const UserCode = `await CollectSDK.save(
  "user", // label
  {
    name: "John Galt"
  }
)

// Autogenerated API
const api = "/api/v1/label/user"
`;

const OrderCode = `await CollectSDK.save(
  "order", // label
  {
    id: 1011
  }
)

// Autogenerated API
const api = "/api/v1/label/order"
`;
const BookingCode = `await CollectSDK.save(
  "booking", // label
  {
    withPets: true
  }
)

// Autogenerated API
const api = "/api/v1/label/booking"
`;
const FlightCode = `await CollectSDK.save(
  "flight", // label
  {
    destination: "Melbourne"
  }
)

// Autogenerated API
const api = "/api/v1/label/flight"
`;
const ArticleCode = `await CollectSDK.save(
  "article", // label
  {
    title: "Top memes of the year"
  }
)

// Autogenerated API
const api = "/api/v1/label/article"
`;

const data: { color: ColoredChipColor; title: string; code: string }[] = [
  { color: "purple", title: "User", code: UserCode },
  { color: "red", title: "Order", code: OrderCode },
  { color: "blue", title: "Booking", code: BookingCode },
  { color: "green", title: "Flight", code: FlightCode },
  { color: "yellow", title: "Article", code: ArticleCode },
];
export const DynamicApis = () => {
  const groups = useRef(
    data.reduce<Array<ColoredChipColor>>((acc, item) => {
      acc.push(item.color as ColoredChipColor);
      return acc;
    }, []),
  );
  const [group, cycleGroup] = useCycle(...groups.current);
  const interval = useRef<ReturnType<typeof setInterval>>();
  const [paused, setPaused] = useState(false);
  const ref = useRef(null);
  const isInView = useInView(ref);

  useEffect(() => {
    if (!paused && isInView) {
      interval.current = setInterval(() => {
        cycleGroup();
      }, 1300);
    }
    return () => clearInterval(interval.current);
  }, [cycleGroup, paused, isInView]);

  useEffect(() => {
    const pausedTimer = setTimeout(() => {
      setPaused(false);
    }, 1700);
    return () => clearTimeout(pausedTimer);
  }, [paused]);

  const selectGroup = (group: ColoredChipColor) => () => {
    setPaused(true);
    cycleGroup(groups.current.indexOf(group));
  };

  return (
    <FeatureContainer>
      <div className={cx("z-10")}>
        <div className={"mb-8"}>
          <div className={cx("feature-tag")}>Feature</div>
          <h2 className={cx("typography-3xl mb-4")}>Dynamic APIs</h2>
          <p className="typography-base max-w-2xl ">
            Simply label what you push to Collect and retrieve it all using the
            automatically assigned "labeled" endpoint.
          </p>
        </div>
        <div className={cx("grid grid-cols-2 z-10 gap-16", "md:grid-cols-1")}>
          <div
            ref={ref}
            className="flex relative flex-wrap justify-center items-center z-10 content-center w-full gap-8 md:gap-4 sm:gap-2"
          >
            {data.map((item) => (
              <ColoredChip
                color={group === item.color ? item.color : "dark"}
                key={item.title}
                onClick={selectGroup(item.color)}
                animate={{ rotate: randomIntFromRange(-3, 3) }}
                transition={{ type: "spring", stiffness: 100 }}
              >
                {item.title}
              </ColoredChip>
            ))}
          </div>

          <CodeBlock
            className="rounded-md md:m-auto sm:w-full"
            code={data[groups.current.indexOf(group)].code}
          />
        </div>
      </div>
    </FeatureContainer>
  );
};
